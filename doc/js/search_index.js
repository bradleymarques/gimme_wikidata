var search_data = {"index":{"searchIndex":["gimmewikidata","actions","claim","entity","entityresult","item","itemstub","languages","parser","property","props","search","searchresult","snak","wikidataapi","gimmewikidatatest","minitest","minitest","reporters","object","symbolizehelper","base_url()","empty?()","empty_search_results()","fetch()","get_entities_query()","get_language()","make_call()","new()","new()","new()","new()","new()","no_such_entity_response()","parse_entity()","parse_entity_response()","parse_search_response()","property_search_results()","sample_search_results()","search()","search_query()","set_language()","simple_single_item_results()","symbolize_recursive()","teardown()","test_entity_response_says_there_are_no_entities()","test_entity_response_says_when_it_is_unsuccessful()","test_entity_response_throws_an_error_if_there_is_one_present()","test_it_can_build_a_base_url()","test_it_can_build_get_entities_query_with_specified_parameters()","test_it_can_build_get_entties_query_with_default_parameters()","test_it_can_build_search_query_with_default_parameters()","test_it_can_build_search_query_with_specified_parameters()","test_it_can_change_language()","test_it_can_parse_entities_response()","test_it_can_parse_search_response()","test_it_does_not_change_language_if_new_language_is_unknown()","test_it_has_a_data_format()","test_it_has_a_default_language()","test_it_has_an_api_url()","test_it_raises_argument_error_if_search_response_does_not_have_correct_form()","test_it_says_search_is_empty_when_its_empty()","test_it_says_search_response_was_successful_when_it_was_successful()","test_that_it_has_a_version_number()","top_result()","valid_id?()","valid_ids?()","was_successful?()","gemfile","gemfile.lock","license","readme","rakefile","setup","gimme_wikidata.gemspec","index.html"],"longSearchIndex":["gimmewikidata","gimmewikidata::actions","gimmewikidata::claim","gimmewikidata::entity","gimmewikidata::entityresult","gimmewikidata::item","gimmewikidata::itemstub","gimmewikidata::languages","gimmewikidata::parser","gimmewikidata::property","gimmewikidata::props","gimmewikidata::search","gimmewikidata::searchresult","gimmewikidata::snak","gimmewikidata::wikidataapi","gimmewikidatatest","minitest","minitest","minitest::reporters","object","symbolizehelper","gimmewikidata::wikidataapi::base_url()","gimmewikidata::search#empty?()","object#empty_search_results()","gimmewikidata::fetch()","gimmewikidata::wikidataapi::get_entities_query()","gimmewikidata::wikidataapi::get_language()","gimmewikidata::wikidataapi::make_call()","gimmewikidata::claim::new()","gimmewikidata::entity::new()","gimmewikidata::entityresult::new()","gimmewikidata::search::new()","gimmewikidata::searchresult::new()","object#no_such_entity_response()","gimmewikidata::parser::parse_entity()","gimmewikidata::parser::parse_entity_response()","gimmewikidata::parser::parse_search_response()","object#property_search_results()","object#sample_search_results()","gimmewikidata::search()","gimmewikidata::wikidataapi::search_query()","gimmewikidata::wikidataapi::set_language()","object#simple_single_item_results()","symbolizehelper#symbolize_recursive()","gimmewikidatatest#teardown()","gimmewikidatatest#test_entity_response_says_there_are_no_entities()","gimmewikidatatest#test_entity_response_says_when_it_is_unsuccessful()","gimmewikidatatest#test_entity_response_throws_an_error_if_there_is_one_present()","gimmewikidatatest#test_it_can_build_a_base_url()","gimmewikidatatest#test_it_can_build_get_entities_query_with_specified_parameters()","gimmewikidatatest#test_it_can_build_get_entties_query_with_default_parameters()","gimmewikidatatest#test_it_can_build_search_query_with_default_parameters()","gimmewikidatatest#test_it_can_build_search_query_with_specified_parameters()","gimmewikidatatest#test_it_can_change_language()","gimmewikidatatest#test_it_can_parse_entities_response()","gimmewikidatatest#test_it_can_parse_search_response()","gimmewikidatatest#test_it_does_not_change_language_if_new_language_is_unknown()","gimmewikidatatest#test_it_has_a_data_format()","gimmewikidatatest#test_it_has_a_default_language()","gimmewikidatatest#test_it_has_an_api_url()","gimmewikidatatest#test_it_raises_argument_error_if_search_response_does_not_have_correct_form()","gimmewikidatatest#test_it_says_search_is_empty_when_its_empty()","gimmewikidatatest#test_it_says_search_response_was_successful_when_it_was_successful()","gimmewikidatatest#test_that_it_has_a_version_number()","gimmewikidata::search#top_result()","gimmewikidata::valid_id?()","gimmewikidata::valid_ids?()","gimmewikidata::search#was_successful?()","","","","","","","",""],"info":[["GimmeWikidata","","GimmeWikidata.html","",""],["GimmeWikidata::Actions","","GimmeWikidata/Actions.html","","<p>Models an enum of the &#39;action&#39; parameters in Wikidata API calls\n<p>See www.wikidata.org/w/api.php?action=help&modules=main …\n"],["GimmeWikidata::Claim","","GimmeWikidata/Claim.html","","<p>Models a Claim on Wikidata, which consists of a Property and a value\n<p>Note that the value can be of any …\n"],["GimmeWikidata::Entity","","GimmeWikidata/Entity.html","","<p>Models an Entity on Wikidata.\n<p>An Entity is suclassed into Item, ItemStub and Property\n<p>See:\nwww.wikidata.org/wiki/Wikidata:Glossary#Entities.2C_items.2C_properties_and_queries\n…\n"],["GimmeWikidata::EntityResult","","GimmeWikidata/EntityResult.html","","<p>Models a parsed response from a get entities query to the Wikidata API\n"],["GimmeWikidata::Item","","GimmeWikidata/Item.html","","<p>Models an Item on Wikidata, which is a “real-world object, concept, event”\n<p>Please see:\nwww.wikidata.org/wiki/Wikidata:Glossary#Entities.2C_items.2C_properties_and_queries\n…\n"],["GimmeWikidata::ItemStub","","GimmeWikidata/ItemStub.html","","<p>An ItemStub is a placeholder for an Item; essentially, it an Item without\nany claims, but with an id, …\n"],["GimmeWikidata::Languages","","GimmeWikidata/Languages.html","","<p>The languages possible when communicating with the Wikidata API\n<p>See: www.wikidata.org/w/api.php?action=help&modules=wbgetentities …\n"],["GimmeWikidata::Parser","","GimmeWikidata/Parser.html","","<p>Responsible for parsing the JSON data returned from the Wikidata API.\n<p>Parses responses to the following …\n"],["GimmeWikidata::Property","","GimmeWikidata/Property.html","",""],["GimmeWikidata::Props","","GimmeWikidata/Props.html","","<p>Models an enum of the &#39;props&#39; arguments in wbgetentity calls.\n<p>See www.wikidata.org/w/api.php?action=help&modules=wbgetentities …\n"],["GimmeWikidata::Search","","GimmeWikidata/Search.html","",""],["GimmeWikidata::SearchResult","","GimmeWikidata/SearchResult.html","",""],["GimmeWikidata::Snak","","GimmeWikidata/Snak.html","","<p>Models a Snak on Wikidata, which is a data point with a specific type.\n<p>Snaks are often of type Item:  …\n"],["GimmeWikidata::WikidataAPI","","GimmeWikidata/WikidataAPI.html","","<p>TODO: DOCUMENT THIS IMPORTANT CLASS\n"],["GimmeWikidataTest","","GimmeWikidataTest.html","",""],["MiniTest","","MiniTest.html","",""],["Minitest","","Minitest.html","",""],["Minitest::Reporters","","Minitest/Reporters.html","",""],["Object","","Object.html","",""],["SymbolizeHelper","","SymbolizeHelper.html","","<p>Pilfered from EdvardM at: apidock.com/rails/Hash/deep_symbolize_keys\n"],["base_url","GimmeWikidata::WikidataAPI","GimmeWikidata/WikidataAPI.html#method-c-base_url","()","<p>Helper function to build a commonly-used URL\n<p>Appends default format and language to the base Wikidata …\n"],["empty?","GimmeWikidata::Search","GimmeWikidata/Search.html#method-i-empty-3F","()",""],["empty_search_results","Object","Object.html#method-i-empty_search_results","()",""],["fetch","GimmeWikidata","GimmeWikidata.html#method-c-fetch","(ids)","<p>TODO: Document\n"],["get_entities_query","GimmeWikidata::WikidataAPI","GimmeWikidata/WikidataAPI.html#method-c-get_entities_query","(ids: ['Q1'], props: [Props::LABELS, Props::DESCRIPTIONS, Props::ALIASES])","<p>Build a query to get Entities (Items and Properties) from Wikidata.\n<p>Interfaces the the module described …\n"],["get_language","GimmeWikidata::WikidataAPI","GimmeWikidata/WikidataAPI.html#method-c-get_language","()","<p>Gets the language used to communicate to the Wikidata API\n"],["make_call","GimmeWikidata::WikidataAPI","GimmeWikidata/WikidataAPI.html#method-c-make_call","(query)","<p>Simply makes a call to the Wikidata API and formats the response into a\nsymbolized hash\n"],["new","GimmeWikidata::Claim","GimmeWikidata/Claim.html#method-c-new","(property, value)",""],["new","GimmeWikidata::Entity","GimmeWikidata/Entity.html#method-c-new","(id, label, description, aliases)",""],["new","GimmeWikidata::EntityResult","GimmeWikidata/EntityResult.html#method-c-new","(success, error)",""],["new","GimmeWikidata::Search","GimmeWikidata/Search.html#method-c-new","(success, search_term)",""],["new","GimmeWikidata::SearchResult","GimmeWikidata/SearchResult.html#method-c-new","(id, label, description)",""],["no_such_entity_response","Object","Object.html#method-i-no_such_entity_response","()",""],["parse_entity","GimmeWikidata::Parser","GimmeWikidata/Parser.html#method-c-parse_entity","(e)","<p>Parses a single entity as part of a get entities query (wbgetentities)\n<p><strong>Args</strong>    :\n<p><code>e</code> -&gt; hash form of entity …\n"],["parse_entity_response","GimmeWikidata::Parser","GimmeWikidata/Parser.html#method-c-parse_entity_response","(response)","<p>Parses the results from a get entities query (wbgetentities)\n<p><strong>Args</strong>    :\n<p><code>response</code> -&gt; hash form of the …\n"],["parse_search_response","GimmeWikidata::Parser","GimmeWikidata/Parser.html#method-c-parse_search_response","(response)","<p>Parses the results from a search query (wbsearchentities)\n<p><strong>Args</strong>    :\n<p><code>response</code> -&gt; hash form of the response …\n"],["property_search_results","Object","Object.html#method-i-property_search_results","()",""],["sample_search_results","Object","Object.html#method-i-sample_search_results","()","<p>Some example Wikidata API returns to use in tests:\n"],["search","GimmeWikidata","GimmeWikidata.html#method-c-search","(search_term, strict_language: false, type: 'item', limit: 50, continue: 0)","<p>Search the Wikidata API for a particular search term, and get the results.\n<p>Searches the Wikidata API for …\n"],["search_query","GimmeWikidata::WikidataAPI","GimmeWikidata/WikidataAPI.html#method-c-search_query","(search: \"wikidata\", strict_language: false, type: 'item', limit: 50, continue: 0)","<p>Builds a search query.\n<p>Interfaces with the module described here:\nwww.wikidata.org/w/api.php?action=help&modules=wbsearchentities …\n"],["set_language","GimmeWikidata::WikidataAPI","GimmeWikidata/WikidataAPI.html#method-c-set_language","(language_symbol)","<p>Set the language for the WikidataAPI.  This is used when communicating to\nthe API.\n<p>Returns the string …\n"],["simple_single_item_results","Object","Object.html#method-i-simple_single_item_results","()",""],["symbolize_recursive","SymbolizeHelper","SymbolizeHelper.html#method-i-symbolize_recursive","(hash)",""],["teardown","GimmeWikidataTest","GimmeWikidataTest.html#method-i-teardown","()",""],["test_entity_response_says_there_are_no_entities","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_entity_response_says_there_are_no_entities","()",""],["test_entity_response_says_when_it_is_unsuccessful","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_entity_response_says_when_it_is_unsuccessful","()",""],["test_entity_response_throws_an_error_if_there_is_one_present","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_entity_response_throws_an_error_if_there_is_one_present","()",""],["test_it_can_build_a_base_url","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_it_can_build_a_base_url","()",""],["test_it_can_build_get_entities_query_with_specified_parameters","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_it_can_build_get_entities_query_with_specified_parameters","()",""],["test_it_can_build_get_entties_query_with_default_parameters","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_it_can_build_get_entties_query_with_default_parameters","()",""],["test_it_can_build_search_query_with_default_parameters","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_it_can_build_search_query_with_default_parameters","()",""],["test_it_can_build_search_query_with_specified_parameters","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_it_can_build_search_query_with_specified_parameters","()",""],["test_it_can_change_language","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_it_can_change_language","()",""],["test_it_can_parse_entities_response","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_it_can_parse_entities_response","()",""],["test_it_can_parse_search_response","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_it_can_parse_search_response","()","<p>Parser Tests\n"],["test_it_does_not_change_language_if_new_language_is_unknown","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_it_does_not_change_language_if_new_language_is_unknown","()",""],["test_it_has_a_data_format","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_it_has_a_data_format","()",""],["test_it_has_a_default_language","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_it_has_a_default_language","()","<p>WikidataAPI Tests\n"],["test_it_has_an_api_url","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_it_has_an_api_url","()",""],["test_it_raises_argument_error_if_search_response_does_not_have_correct_form","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_it_raises_argument_error_if_search_response_does_not_have_correct_form","()",""],["test_it_says_search_is_empty_when_its_empty","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_it_says_search_is_empty_when_its_empty","()",""],["test_it_says_search_response_was_successful_when_it_was_successful","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_it_says_search_response_was_successful_when_it_was_successful","()",""],["test_that_it_has_a_version_number","GimmeWikidataTest","GimmeWikidataTest.html#method-i-test_that_it_has_a_version_number","()","<p>Smoke Tests\n"],["top_result","GimmeWikidata::Search","GimmeWikidata/Search.html#method-i-top_result","()",""],["valid_id?","GimmeWikidata","GimmeWikidata.html#method-c-valid_id-3F","(id)","<p>Valdiates whether single id matches Wikidata format\n<p>Wikidata has ids in the form &#39;QN&#39; or &#39;PN&#39; …\n"],["valid_ids?","GimmeWikidata","GimmeWikidata.html#method-c-valid_ids-3F","(ids)","<p>Valdiates that the passed array of ids matches Wikidata format\n<p>Wikidata has ids in the form &#39;QN&#39; …\n"],["was_successful?","GimmeWikidata::Search","GimmeWikidata/Search.html#method-i-was_successful-3F","()",""],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p># Specify your gem&#39;s dependencies in gimme_wikidata.gemspec gemspec …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  gimme_wikidata (0.2.0)\n    httparty\n    ruby-enum</pre>\n<p>GEM\n"],["LICENSE","","LICENSE_txt.html","","<p>The MIT License (MIT)\n<p>Copyright © 2016 Bradley Marques\n<p>Permission is hereby granted, free of charge, …\n"],["README","","README_md.html","","<p>GimmeWikidata\n<p>A Ruby gem to search and receive (and, in future create) data on the\nWikidata open knowledge …\n"],["Rakefile","","Rakefile.html","","<p>require &#39;bundler/gem_tasks&#39; require &#39;rake/testtask&#39;\n<p>Rake::TestTask.new(:test) do |t|\n\n<pre>t.libs ...</pre>\n"],["setup","","bin/setup.html","","<p>#!/bin/bash set -euo pipefail IFS=$&#39;nt&#39;\n<p>bundle install\n<p># Do any other automated setup that you …\n"],["gimme_wikidata.gemspec","","gimme_wikidata_gemspec.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"],["index.html","","test/html_reports/index_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html lang=“en”&gt; &lt;head&gt;\n\n<pre>&lt;title&gt;Test Results&lt;/title&gt;\n&lt;link ...</pre>\n"]]}}